
util.settings.address: abcde

# 使用配置属性；命令行设置；修改环境变量（LOG_FILE_MAX_SIZE）
# https://www.cnblogs.com/bigben0123/p/7895696.html
logging:
  file: log/current.log
  # path:
  # file.max-size:
  # file.max-history:
  level:
    root: info
    com.data: DEBUG
    com.data.testinfo: ERROR
    #org.springframework.web: DEBUG
    #org.hibernate: ERROR

# 默认在dev配置下运行
spring:
  #profiles.default: dev
  profiles.active: multi-3
  #profiles.active: product

#db.address: 192.168.36.91
db.address: 192.168.127.91

---
spring:
  profiles: dev
  #  Hibernate:
  #   none: 生产环境应该保持默认值
  #   update: 加载hibernate自动更新数据库结构
  #   create: 每次加载hibernate，重新创建数据库表结构
  #   create-drop: 加载hibernate时创建，退出是删除表结构
  jpa:
    hibernate.ddl-auto: create
  datasource:
    url: jdbc:mysql://${db.address}:3306/data_jpa
    username: long
    password: 111111
    # driver-class-name: com.mysql.jdbc.Driver

---
# 多数据源测试
#   有多种模式，每个模式使用一个Profile，他们使用相同的外部配置，区别在于使用了不同的代码
#   这里定义为公共配置，所有的profiles都可以使用；不相关的配置，并不会读取到这里来
spring:
  # 注意，这里的jpa相关配置，是全局的影响（dev模式下被覆盖了）
  jpa:
    database-platform: org.hibernate.dialect.MySQL5Dialect
    # Hibernate: none, update, create, create-drop; 生产环境应该保持默认值：none

    #### 生产模式下设置为 update、none
    hibernate.ddl-auto: update

    #在动态配置DataSource时，需要关闭系统自动配置，导致ID设置为AUTO时不能根据数据库类型，进行自动切换
    #   这个选项即使更改，也没起作用
    #hibernate.id.new_generator_mappings: false
  db1:
    url: jdbc:mysql://${db.address}:3306/db1
    username: long
    password: 111111
    driver-class-name: com.mysql.jdbc.Driver
  db2:
    url: jdbc:mysql://${db.address}:3306/db2
    username: long
    password: 111111
    driver-class-name: com.mysql.jdbc.Driver

#spring:
#  data-new:
#    url: jdbc:mysql://192.168.36.91:3306/data_jpa
#    username: long
#    password: 111111
#    driver-class-name: com.mysql.jdbc.Driver
#    jpa.hibernate.ddl-auto: create