# coding=utf-8

''' 原始字符串，不进行转义
    打开文件时经常用到，以免错误解析路径 c:\new\text.dat; 也可以全程使用\\
    raw 方式仍然不能以单个\结尾

    格式化表达式、格式化函数的比较：201 P
'''
raw = r'1122 \n\t'
print(raw)

''' multi line
    多行字符串
'''

''' 字节字符串
'''
byte = b'112233'
print(byte)

# 连续字符串，可以自动合并, 可以不用 +
print('aa' "bb" 'cc')
# 自动加空格
print('aa',"bb",'cc')

print('SPARM!' * 4)

#################################################################################################
# str：一般用途，转变成一种更友好的形式
# repr 用于额外细节
num = 1/3
print(repr(num))
print(str(num))

# repr 原样显示，相当于 b''?
s = '\tbb\n\d'
print(repr(s), s)

num = 100
print(int(num), hex(num), bin(num))

####################################################################################################
''' 类型转换
'''

''' 数字和字符串
'''
print(int("111111111"))

print(25 + int(100))
print(str(100) + ", 09877")

print(ord('1'))
print(chr(ord('1')))


# 进制转换
#   转换的时字符串
a = "0x88"
print(int(a, 16))

#################################################################################################
''' 格式化表达式, P 193
    1.
        %r 使用 repr，而不是str来进行显示
        *  可以动态指定宽度和精度
    2. 动态
        可以使用右侧定义的字典来指定；可以使用本地定义的变量名生成dict导入
'''
# 该方式会自动在两边加上空格
key = "a"
print(key, '->', 56)

print('%s @ key' % key)
print('%s @ key %d' % (key, 100))

# 可以全部使用%s, 这样最简单
print('%s @ key %s' % (key, 100))

# 用repr进行显示
s = "\b\t"
print('%s @ key %r' % (key, s))

# 动态指定宽度，使用*
print('%*s @ key %r' % (-10, key, s))

# 使用字典
#   1. 字典必须是常量，其value不能是变量？
print('dict: %(v)s' % {"v": 'ssss', 't' : 'bb'})

#   2. 使用本地定义的变量
food = 'apple'
age = 40
print("%(age)d like %(food)s" % vars())

#################################################################################################


''' 格式化方法 （都放在{}中，没有%）  P197
    ‘格式化字符串’.format(参数列表)
    
    1. 格式化部分，位置、关键字名称可以混用
    2. 指定相应对象的索引(list、dict)、类属性；
        当然，这些可以在格式化字符串之外指定（视觉上差一些？）
    3. 可用于进制转换
'''
template = '{0}, {data}, {0}-{1}'
print(template.format("good", 100, data=999))

import sys
print('{2[spam]} on {0.platform}'.format(sys, 1, {'spam': 'work'}))

# 后跟：增加更具体的格式
#   另：这里有两种定义dict的方式
print('{0.platform:<10} {1[item]:>010} {2[good]:} {3:.2f}'.format(sys, dict(item="laptop"), {"good": 'ss'}, 1/3))

# 替代直接转换的方法
#   用格式化字符处，进行整数和特定进制的转换
print('{0:X} {0:o}, {0:b}:  {1} - {2}'.format(255, bin(255), hex(255)))

# 嵌套方式
#   动态定义格式化参数
#   等同于%方式的 %.*f
print('{0:.{1}f}'.format(1/3, 5))

# 更简单方法
#   如果都不明确指定位置信息
print('the first {}, the second {}'.format(100, 300))