package com.data.a1_common

/*
## Todo
    函数式编程，不就地修改数据，影响性能和空间使用？
    符号字面量，(P51)

## 说明
    ## 主要
        无类型的脚本语言的替代者（附录A，可以像shell直接在代码中写脚本）
        最终转化为java代码，性能基本没有损失

    ## 理念
        函数是第一类成员
        函数是对能产生值的表达式的定义
        基本大部分表达式都能产生值

    ## 语法
        变量声明，类型在后边，类似于go等
        语法快捷简单，编译器的类型推断较强
        类定义可以当做一个函数（主构造器）一样，写各种语句，将会依次执行
        为了进一步整合，提供了implicit等语法
        特质比接口功能更多，可以串联起来起作用

## 整体
    1. 是面向对象（构造大型系统及适应新需求）+ 函数式编程（用来来简单，简化代码），加入到静态语言中的混合体
        1. 纯粹的面向对象
                1）每个值都是对象，每个操作都是方法调用
        2. 函数式语言，主要理念：
                1）函数式头等值，函数也是值：简化了操作符的抽象，和新控制结构的创建；这样函数的泛化又很强的表现力，是程序清晰易懂的保证
                2）方法不应该有副作用：应该把输入映射为输出，而不是就地修改数据
        3. 静态类型的优势
                1）可检查的属性，可以消除运行时错误
                2）安全的进行重构

    2. 灵活性
        不同功能切面，可以分成若干特质，并灵活组合起来

## 语言
    ## 特点
        很多地方可以不指名类型，自行推断
        方便创造新的类型，看上去就像是语言內建的一样，无缝对接
        基于actor并发抽象（传递消息来通讯），类似于go的channel？
        代码简洁，编写快速，而且不容易出错
        使用curry、传名函数，方便构造新的控制结构

    ## 简洁性
        类型推断系统很强，可以省略很多信息
        分号可选；一行有多个语句时才是必须的
        执行结束时，可以不写return，类似于go
        主构造函数，可以同时也定义参数和类成员
        没有参数的函数，可以不要括号
        函数定义：
            函数返回值可以省略，系统能够推断的情况下（如果是递归使用，则必须指明）；写明返回值仍然是个好习惯 P18
            函数的参数很多时候可以推断出来，因此能够省略（通过目标类型推断，即函数要用在的地方）
            函数很短时，甚至可以去掉花括号，与def写在同一行
        样本类、模式匹配

    ## 语法
        定义变量时，除了类型之外，多加了一个 val（类似于java的final）、var
        类型标注语法，类型在后边不是前边
        类中定义的成员，默认是public
        三元操作符是 if else；基本上，所有表达式都返回值
        跨域多行时，需要结尾是操作符，否则表达式用()括起来
        没有操作符重载；而且所有操作符哦实际上都是方法调用 (24)
            如果操作符是:结尾（如： ::）那么是右操作数方法；其他情况下都是左操作数的方法
        包括原生字符串，类似于python
        类定义更严格，主构造器，可以添加先决条件验证
        函数没有参数，但是进行了某些改变，调用方法时，推荐写上()

    ## 灵活性
        函数参数可以指定默认值
        可以进行函数嵌套，定义内嵌函数
        import语句可以出现在任何地方，而不是只能在文件顶部
        文件可以以脚本的方式执行（只要文件已结果表达式结束即可）

    ## 风格
        用函数式的编程风格替换指令式风格，foreach
        使用val、不可变对象、没有副作用的方法
        方法短时尽量不适用花括号

    ## 使用
        可变集和不可变集合都有相同的方法，不同的是：可变集将变更加入到自身，不可变集合将创建并返回新的集合

    ## 注意：
        Nil是空列表对象（单例对象object），不是null
        赋值语句永远返回 unit，因此不用用在 while((x = next()))

## 与java不同
    ## 类型系统：
          没有内置类型，所有的对象都是类；不像java那样搞两套类型系统
                但这行不会影响性能，在编译阶段可能也会转化为java的原始类型
          使用泛型时，他们都进行了类型擦除
          java中的参数化类的参数，允许是原始类型；scala中不允许

    ## 性能：会转换为jvm字节码，性能与java一样
    ## 简洁：
        代码可以少到java的1/10
        match可以匹配字符串

    ## 重用：重用java的所有方法

    ## 语法：
        函数可以指定默认值
        不需要捕获检查异常？
        类定义简洁，直接带参数，作为类的成员；类中直接执行语句 P62
        不同的类可以写在一个文件中（最好还是分开定义）
        与java不同，使用 => 不是 ->
        去掉了break、continue

    ## 库支持：
        Tuple、Option

    ## 比较性
        对引用类型，== 比较的不是引用相等性；此语义在scala中是eq, P58
        不同类型的也可以比较；自动调用左操作数的equals方法（做操作数是null也可以）

    ## 基本类型：
        使用了富包装器，给基本类型定义了更多的功能
        Nothing是所有类型的子类型

    ## 设计
        闭包：P120 可以改变闭包中的自由变量；java中捕获的变量时 final 的
        特质类似于接口，但是能做更多事情，保存成员状态；特质不能完全转化为接口？
        命名空间可以用 {}包含起来，包可以是嵌套的 P175

    ## 实现
        scala的 lamda 转换为函数 FuncionN[T,...]; java的 lamda 转换为函数式接口
        scala中的参数化类是协变的


    ## 机制
        懒加载
        隐式转换，可以模拟新的语法 P291


## 工程
    加快编译：P44，fsc快速scala编译器

## Book
    默认：《scala编程》，1-13章有正版

## 资料
    https://www.w3cschool.cn/scaladevelopmentguide/14sl1jb0.html
    http://www.runoob.com/scala/scala-tutorial.html
    https://www.yiibai.com/scala/scala_overview.html#

*/