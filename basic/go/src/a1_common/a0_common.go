package a1_common

/**
## Todo
	go语言编程：第九章，网络编程、密码学相关
	编译快的原因？

## 整体
	无类型的脚本语言的替代者

## 主要特点
 	编译快、执行快
	格式标准化、代码风格强制统一;格式不对无法编译
	在语言级别，支持协程作为执行体，与python类似
	自动垃圾回收
		这时最好的方案，就是在语言级别处理；否则需要人工编写回收代码，非常麻烦
		C++本身太过强大，实现自动回收非常困难

## 语言
	## 语法
		丰富的语法结构：switch 任意类型（类似于scala，高于java、python）
		引入了函数式编程的概念，不可变性
		变量定义上，进行了类型推导
		更多的内置类型；有nil值
		所有类型，都可以用空接口 interface{} 引用
		函数多返回值，类似于其他语言的 tuple
		错误处理机制，减少代码量

	## 类型系统
		函数是一等公民，函数是值类型，可以作为参数传递；
			Java有两套独立的类型系统：基本类型（值语义）、对象类型（引用语义，在堆上创建）
		通过组合方式，实现了继承机制（匿名组合，不是一般的组合，不需要对组合的类的各个函数进行封装，可以直接使用；就像是继承一样）

	## 对象逻辑
		不支持复杂的类，只提供类型组合功能
		提供了反射的大部分功能

	## 风格
		可以不要分号；if 表达式后没有括号（类似于python）
		语言风格是驼峰式，函数首字母大写
		通过成员首字母大小写，进行权限控制（类似于python，根据__前缀来表明是权限保护）

	## 并发
		并发编程比较简单，实现了通讯顺序模式 CSP 作为 goroutine 的通信方式

	## 设计
		原生支持unicode

## 哲学
	1. 反对重载 函数和操作符；
	2. 反对继承、虚函数；没有构造、析构函数
		这些特性对解决问题并没有显著的价值，都可以用其他方式来实现

	3. 提供的是非侵入性接口
		不需要绘制继承树图
		不需要考虑如何将接口拆分才合理；不用事先规划，按需定义
		松散的关系，大幅降低因为接口调整导致的代码调整工作
		不用为了实现接口，而专门导入接口的包：只要方法列表相同，接口就是等同的，减少耦合

## 工程
	完全不使用工程文件，使用目录结构和包名来推导工程结构和构建顺序

## 补充
	将C与函数语言、动态语言进行了一些结合
	与rust相似，struct和其对应的 “成员函数”  是分开定义的

## 疑问
	指针引用等用法，看起来容易混淆

## Book
	默认：《Go语言编程》
	Bible：《Go语言圣经》、B（简称）
 */
